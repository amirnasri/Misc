import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;

/*
 * Sep 11, 2015
 * http://community.topcoder.com/stat?c=problem_statement&pm=10154&rd=13694
 */

class LampsGrid {
	static HashMap<String, Integer[]> hm = new HashMap<>();
	
	public static int mostLit(String[] initial, int K) {
		
		for (String row: initial) {
			Integer[] val = hm.get(row);
			if (val == null) {
				int zeros_cnt = 0;
				for (int i = 0; i < row.length(); i++) {
					if (row.charAt(i) == '0')
						zeros_cnt++;
				}
				hm.put(row, new Integer[]{1, zeros_cnt});
			}
			else {
				val[0]++;
				hm.put(row, val);
			}
		}
		// Instead of sorting in O(n log n), we can do O(n) by going through the list and finding the best
		// although each operation would be more costly.
		List<Integer[]> values = new ArrayList<>(hm.values());
		Collections.sort(values, new Comparator<Integer[]>() {
			public int compare(Integer[] i1, Integer[] i2) {
				return Integer.compare(i1[0], i2[0]);
			}
		});
		
		for (int i = 0; i < values.size(); i++) {
			int index = values.size() - i - 1;
			int zeros_num = values.get(index)[1];
			if (K >= zeros_num && K % 2 == zeros_num % 2) {
				return values.get(index)[0];
			}
		}
		return 0;
	}
	public static void main(String[] args) {
		String[] initial = new String[]	{};
		int K = 28;
		System.out.println(mostLit(initial, K));
	}
}